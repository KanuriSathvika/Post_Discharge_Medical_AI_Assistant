from langgraph.prebuilt import create_react_agent
from langgraph.graph import START, END, StateGraph
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.tools import tool
from langchain.prompts import ChatPromptTemplate
from dotenv import load_dotenv
import os, sys
# from langgraph.types import Command
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../..")))
from backend.mongo_database import get_patient_by_id
from agents.clinical_agent.clinical_agent import clinical_assistant
from langgraph_swarm import create_handoff_tool, create_swarm
from agents.receptionist_agent.patient_report_tool import patient_report_tool
from typing_extensions import TypedDict, Literal
from agents.llm_model import llm

# load_dotenv()

# llm = ChatGoogleGenerativeAI(
#     model="gemini-2.5-pro-preview",
#     google_api_key=os.getenv("GOOGLE_API_KEY")
# )

MEDICAL_KEYWORDS = [
    "medication", "dose", "symptom", "treatment", "side effect",
    "pain", "diet", "swelling", "blood", "fever", "fatigue"
]

def is_medical_query(query: str):
    return any(word in query.lower() for word in MEDICAL_KEYWORDS)





# Define the state schema
class ReceptionistState(TypedDict):
    """State schema for the receptionist agent workflow.
    Attributes:
        patient_id: Unique identifier for the patient.
        patient_name: Full name of the patient.
        query: User's question or request.
        response: Response generated by the agent.
        patient: Patient record fetched from MongoDB.
    """
    patient_id: str
    patient_name: str
    query: str
    response: str
    patient: dict | None



prompt="""
You are a helpful and intelligent **Medical Receptionist Assistant** designed to support patients after discharge.

Your primary responsibilities are:

---

🩺 **Step-by-Step Workflow:**

1. **Greet and Ask for Patient ID**  
   - Start by saying:  
     `"Hi! Welcome back. Could you please provide your **Patient ID**?"`

2. **Retrieve Patient Report Using Tool**  
   - Once the user provides the Patient ID:
     - Use the `patient_report_tool` to retrieve the patient's discharge report.
     - If the report is found, store it and respond:  
       `"Thank you. I found your discharge report for Patient ID: {patient_id}."`
       - Then ask: `"To verify, may I also have your full name?"`

     - If the ID is not found, respond:  
       `"❌ I could

# Create the prompt template for the receptionist agent
# prompt = ChatPromptTemplate.from_messages([
#     ("system", prompt),
#     ("human", "Hi! Welcome back. Could you please provide your Patient ID?"),
# ])

"""


def get_patient_report(patient_id: str) -> dict:
    """Fetch patient report from the database."""
    patient = get_patient_by_id(patient_id)
    if not patient:
        return {"error": f"No patient found with ID: {patient_id}"}
    return patient



# Create the receptionist agent using ReAct framework
# This agent will handle patient queries and hand off medical questions to the clinical agent
receptionist_assistant = create_react_agent(
    llm,
    [get_patient_report,  patient_report_tool,create_handoff_tool(agent_name="clinical_assistant", description="Transfer to medical queries to the clinical assistant for expert handling.")],
    name="receptionist_assistant",
    prompt=(
        """
        "You are a helpful and intelligent Medical Receptionist Assistant designed to support patients after discharge.\n\n" \
        "when you got any query related to medical or clinical queries, you will handoff the query to the clinical assistant agent.\n\n" \
        "Your primary responsibilities are:\n\n" \
        "1. Greet and ask for Patient ID.\n" \
        "2. Retrieve patient report using the patient_report_tool.\n" \ 
        "3. Verify patient identity by asking for full name.\n" \
        "4. Summarize discharge information and dietary restrictions.\n" \
        "5. Handle general queries or route medical questions to the clinical assistant.\n\n" \
        "Use the following format for your responses:", 
        """
    )
   
)



# ans = receptionist_agent.invoke({
#     "messages": [
#         {"role": "user",
#           "content": f"My name is John Smith , my ID is P001 .What medications do I need to take after discharge?"}
#     ]
# })
# for m in ans["messages"]:
#     print(m.pretty_print())

# ans=agent.invoke(    {
#         "patient_id": "P001",  # Example patient ID
#         "patient_name": "John Smith",  # Example patient name
#         "query": "What medications do I need to take after discharge?"
#     }
# )

# print(ans)

